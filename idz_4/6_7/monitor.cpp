#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <vector>
#include <map>
#include <string>
#include <sstream>
#include <thread>
#include <chrono>

struct Sector {
    int id;
    bool searched = false;
    bool winnieFound = false;
};

struct BeeSwarm {
    int id;
    int currentSector = -1;
    bool active = false;
};

void clearScreen() {
    std::cout << "\033[2J\033[1;1H"; // ANSI escape sequences –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
}

void displayForest(const std::vector<Sector>& sectors, const std::map<int, BeeSwarm>& beeSwarms, int totalSectors, int winnieSector) {
    clearScreen();
    
    std::cout << "=== –ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –í–∏–Ω–Ω–∏-–ü—É—Ö–∞ ===" << std::endl;
    std::cout << "–õ–µ—Å —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ " << totalSectors << " —Å–µ–∫—Ç–æ—Ä–æ–≤" << std::endl;
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤
    std::cout << "\n–°—Ç–∞—Ç—É—Å —Å–µ–∫—Ç–æ—Ä–æ–≤:" << std::endl;
    for (int i = 0; i < totalSectors; i++) {
        std::string status = "[ ]";
        std::string beeInfo = "";
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ç–æ—Ä –≤ —Å–ø–∏—Å–∫–µ
        for (const auto& sector : sectors) {
            if (sector.id == i) {
                if (sector.searched) {
                    if (sector.winnieFound) {
                        status = "[W]"; // –í–∏–Ω–Ω–∏-–ü—É—Ö –Ω–∞–π–¥–µ–Ω
                    } else {
                        status = "[X]"; // –°–µ–∫—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–æ –í–∏–Ω–Ω–∏-–ü—É—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω
                    }
                }
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–∏ –≤ —ç—Ç–æ–º —Å–µ–∫—Ç–æ—Ä–µ
        for (const auto& [id, swarm] : beeSwarms) {
            if (swarm.currentSector == i && swarm.active) {
                beeInfo += " üêù#" + std::to_string(swarm.id);
            }
        }
        
        std::cout << "–°–µ–∫—Ç–æ—Ä " << i << ": " << status << beeInfo << std::endl;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–π
    std::cout << "\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–∏ –ø—á–µ–ª:" << std::endl;
    bool anyActive = false;
    for (const auto& [id, swarm] : beeSwarms) {
        if (swarm.active) {
            anyActive = true;
            std::cout << "–°—Ç–∞—è #" << swarm.id;
            if (swarm.currentSector >= 0) {
                std::cout << " - –∏—Å—Å–ª–µ–¥—É–µ—Ç —Å–µ–∫—Ç–æ—Ä " << swarm.currentSector;
            } else {
                std::cout << " - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —É–ª–µ–π";
            }
            std::cout << std::endl;
        }
    }
    
    if (!anyActive) {
        std::cout << "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–π" << std::endl;
    }
    
    std::cout << "\n== –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞ ==" << std::endl;
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " << argv[0] << " <SERVER_IP> <MONITOR_PORT>" << std::endl;
        return 1;
    }

    const char* serverIP = argv[1];
    int monitorPort = std::stoi(argv[2]);

    // –°–æ–∑–¥–∞–Ω–∏–µ UDP —Å–æ–∫–µ—Ç–∞
    int sockfd;
    struct sockaddr_in serverAddr;
    socklen_t addrLen = sizeof(serverAddr);

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞");
        return 1;
    }

    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(monitorPort);
    serverAddr.sin_addr.s_addr = inet_addr(serverIP);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è recvfrom
    struct timeval tv;
    tv.tv_sec = 1;
    tv.tv_usec = 0;
    setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));

    std::cout << "–ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –í–∏–Ω–Ω–∏-–ü—É—Ö–∞ –∑–∞–ø—É—â–µ–Ω. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É..." << std::endl;
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    char connectMsg[] = "CONNECT_MONITOR";
    sendto(sockfd, connectMsg, strlen(connectMsg), 0, (struct sockaddr*)&serverAddr, addrLen);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    char buffer[1024] = {0};
    int n = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&serverAddr, &addrLen);
    if (n < 0) {
        perror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
        close(sockfd);
        return 1;
    }
    
    int totalSectors = 0;
    int winnieSector = -1;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (strncmp(buffer, "INIT:", 5) == 0) {
        sscanf(buffer + 5, "%d:%d", &totalSectors, &winnieSector);
        std::cout << "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É. –õ–µ—Å —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ " << totalSectors << " —Å–µ–∫—Ç–æ—Ä–æ–≤." << std::endl;
    } else {
        std::cerr << "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" << std::endl;
        close(sockfd);
        return 1;
    }
    
    std::vector<Sector> sectors;
    std::map<int, BeeSwarm> beeSwarms;
    bool gameOver = false;
    
    while (!gameOver) {
        // –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —É —Å–µ—Ä–≤–µ—Ä–∞
        char statusReq[] = "STATUS";
        sendto(sockfd, statusReq, strlen(statusReq), 0, (struct sockaddr*)&serverAddr, addrLen);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        memset(buffer, 0, sizeof(buffer));
        n = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr*)&serverAddr, &addrLen);
        
        if (n > 0) {
            if (strncmp(buffer, "STATUS:", 7) == 0) {
                // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                std::string message(buffer);
                std::stringstream ss(message.substr(7));
                std::string token;
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                sectors.clear();
                beeSwarms.clear();
                
                // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö –¥–æ –º–∞—Ä–∫–µ—Ä–∞ "BEES:"
                while (std::getline(ss, token, ':')) {
                    if (token == "BEES") break;
                    
                    int sectorId = std::stoi(token);
                    bool searched = false;
                    bool winnieFound = false;
                    
                    if (std::getline(ss, token, ':')) searched = (token == "1");
                    if (std::getline(ss, token, ':')) winnieFound = (token == "1");
                    
                    sectors.push_back({sectorId, searched, winnieFound});
                }
                
                // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—è—Ö –ø—á–µ–ª –¥–æ –º–∞—Ä–∫–µ—Ä–∞ "GAME:"
                while (std::getline(ss, token, ':')) {
                    if (token == "GAME") break;
                    
                    int swarmId = std::stoi(token);
                    int currentSector = -1;
                    bool active = false;
                    
                    if (std::getline(ss, token, ':')) currentSector = std::stoi(token);
                    if (std::getline(ss, token, ':')) active = (token == "1");
                    
                    beeSwarms[swarmId] = {swarmId, currentSector, active};
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                bool winnieFoundByBees = false;
                bool allSectorsSearched = false;
                
                if (std::getline(ss, token, ':')) winnieFoundByBees = (token == "1");
                if (std::getline(ss, token, ':')) allSectorsSearched = (token == "1");
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                displayForest(sectors, beeSwarms, totalSectors, winnieSector);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
                gameOver = winnieFoundByBees || allSectorsSearched;
                
            } else if (strncmp(buffer, "FINAL:", 6) == 0) {
                // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                bool winnieFound = false;
                bool allSearched = false;
                
                sscanf(buffer + 6, "%d:%d", &winnieFound, &allSearched);
                
                clearScreen();
                std::cout << "=== –ü–æ–∏—Å–∫ –í–∏–Ω–Ω–∏-–ü—É—Ö–∞ –∑–∞–≤–µ—Ä—à–µ–Ω! ===" << std::endl;
                
                if (winnieFound) {
                    std::cout << "–í–∏–Ω–Ω–∏-–ü—É—Ö –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∫–∞–∑–∞–Ω!" << std::endl;
                } else if (allSearched) {
                    std::cout << "–í—Å–µ —Å–µ–∫—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –Ω–æ –í–∏–Ω–Ω–∏-–ü—É—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω." << std::endl;
                }
                
                gameOver = true;
            }
        }
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
    
    std::cout << "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω." << std::endl;
    
    close(sockfd);
    return 0;
}
